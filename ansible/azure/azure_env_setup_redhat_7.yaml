- name : Preparing the VM to be migrated to Azure
  become: true
  become_method: sudo
  become_user: root
  hosts: all
  gather_facts: no
  force_handlers: True
  tasks:
   
    - block:
      - name: Install wget if not present
        yum:
          pkg: wget
          state: present
      rescue:
        - name: Install wget with shell
          shell: yum install wget -y

    - name: Install azcopy
      shell: |
        wget https://azcopyvnext.azureedge.net/release20201021/azcopy_linux_amd64_10.6.1.tar.gz && \
        tar -zxf ./azcopy_linux_amd64_10.6.1.tar.gz && \
        mv ./azcopy_linux_amd64_10.6.1/azcopy /usr/bin && \
        chmod 777 /usr/bin/azcopy
      
    - name: Copy content to file
      copy: 
        content:  | 
            NETWORKING=yes
            HOSTNAME=localhost.localdomain
        dest: /etc/sysconfig/network
        force: yes

    - name: Copy content to file
      copy: 
        content: |
          DEVICE=eth0
          ONBOOT=yes
          BOOTPROTO=dhcp
          TYPE=Ethernet
          USERCTL=no
          PEERDNS=yes
          IPV6INIT=no
          NM_CONTROLLED=no
        dest: /etc/sysconfig/network-scripts/ifcfg-eth0
        force: yes
      
    - name: Ensure that the network service will start at boot time
      shell: "systemctl enable network"
   
    - name: grub configure
      shell: |
        sed -i '/GRUB_CMDLINE_LINUX_DEFAULT/c\\GRUB_CMDLINE_LINUX_DEFAULT=\"console=tty1 console=ttyS0, earlyprintk=ttyS0,earlyprintk=ttyS0,net.ifnames=0\"' /etc/default/grub
        sed -i '/GRUB_TERMINAL_OUTPUT_DEFAULT/c\\GRUB_TERMINAL_OUTPUT_DEFAULT=\"serial console\"' /etc/default/grub
        sed -i '/GRUB_SERIAL_COMMAND_DEFAULT/c\\GRUB_SERIAL_COMMAND_DEFAULT=\"serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1\"' /etc/default/grub
      args:
        warn: false
      
    - name: rebuild the grub configuration
      shell: "grub2-mkconfig -o /boot/grub2/grub.cfg"

    - name: configure-secure-shell
      lineinfile:
        path: /etc/ssh/sshd_config
        line: |
          ClientAliveInterval 180  
  
    - name: epel-release-latest-7
      shell: yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y
      ignore_errors: True
    
    - name: Install azure linux agent other tools
      yum:
        name: 
          - python-pyasn1
          - cloud-init
          - cloud-utils-growpart
          - gdisk 
          - hyperv-daemons
        state: latest
 
    - name: Download file
      shell: yum install https://rpmfind.net/linux/epel/7/x86_64/Packages/w/WALinuxAgent-2.0.18-1.el7.noarch.rpm -y
      ignore_errors: yes

    - name: Enable azure linux agent
      systemd: 
        name: waagent
        enabled: yes

    - name: Enable cloud init
      systemd: 
        name: cloud-init
        enabled: yes
         
    - name: Configure waagent for cloud-init
      shell: |
        sed -i 's/Provisioning.Agent=auto/Provisioning.Agent=cloud-init/g' /etc/waagent.conf
        sed -i 's/ResourceDisk.Format=y/ResourceDisk.Format=n/g' /etc/waagent.conf
        sed -i 's/ResourceDisk.EnableSwap=y/ResourceDisk.EnableSwap=n/g' /etc/waagent.conf
        sed -i 's/Provisioning.RegenerateSshHostKeyPair=y/Provisioning.RegenerateSshHostKeyPair=n/g' /etc/waagent.conf
        echo "Adding mounts and disk_setup to init stage"
        sed -i '/ - mounts/d' /etc/cloud/cloud.cfg
        sed -i '/ - disk_setup/d' /etc/cloud/cloud.cfg
        sed -i '/cloud_init_modules/a\\ - mounts' /etc/cloud/cloud.cfg
        sed -i '/cloud_init_modules/a\\ - disk_setup' /etc/cloud/cloud.cfg
        echo "Allow only Azure datasource, disable fetching network setting via IMDS"
        cat > /etc/cloud/cloud.cfg.d/91-azure_datasource.cfg <<EOF
        datasource_list: [ Azure ]
        datasource:
            Azure:
                apply_network_config: False
        EOF
        if [[ -f /mnt/resource/swapfile ]]; then
        echo "Removing swapfile" #RHEL uses a swapfile by defaul
        swapoff /mnt/resource/swapfile
        rm /mnt/resource/swapfile -f
        fi
        echo "Add console log file"
        cat >> /etc/cloud/cloud.cfg.d/05_logging.cfg <<EOF

        # This tells cloud-init to redirect its stdout and stderr to
        # 'tee -a /var/log/cloud-init-output.log' so the user can see output
        # there without needing to look on the console.
        output: {all: '| tee -a /var/log/cloud-init-output.log'}
        EOF
        # ResourceDisk.Format=n
        # ResourceDisk.EnableSwap=n
      args:
        warn: false
    
    - name: Deprovision waagent
      shell: |
        cloud-init clean --logs --seed
        waagent -force -deprovision
        rm -f ~/.bash_history
        export HISTSIZE=0